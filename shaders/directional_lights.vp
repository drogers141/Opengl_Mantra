// vertex shader
// stock shader for directional lights 
// with per vertex lighting
// should exactly mimic fixed pipeline

#define MAX_LIGHTS 8

// modify and recompile for different number of lights
#define NUM_LIGHTS 2

// Computation of directional light
// assumes N and L are normalized
// params:
// i: which light, eg 0 -> GL_LIGHT0, ..
// norm: normal in eye coords
// adds to ambient, diffuse, and specular
void direct_light(	const in int i,
					const in vec3 norm,
					inout vec4 ambient,
					inout vec4 diffuse,
					inout vec4 specular ) {
	// diffuse color
	float NdotV = max(0.0, dot(norm, normalize(vec3(gl_LightSource[i].position))));
	// specular color (uses halfway vector from pipeline)
	float NdotH = max(0.0, dot(norm, vec3(gl_LightSource[i].halfVector));
	// specular factor
	float spec_factor;
	if(NdotV == 0.0) {
		spec_factor = 0.0;
	} else {
		spec_factor = pow(NdotH, gl_FrontMaterial.shininess);
	}
	ambient += gl_LightSource[i].ambient;
	diffuse += gl_LightSource[i].diffuse * NdotV;
	specular += gl_LightSource[i].specular * spec_factor;
}

void main() {
	vec4 ambient, diffuse, specular;
	vec3 n = normalize(gl_NormalMatrix * gl_Normal);
	ambient = vec4(0.0);
	diffuse = vec4(0.0);
	specular = vec4(0.0);
	
	// compute the contribution to the color from lights
	int i;
	for(i=0; i<NUM_LIGHTS; i++) {
		direct_light(i, n, ambient, diffuse, specular);
	}
					
	vec4 color = (	gl_FrontLightModelProduct.sceneColor + 
					ambient * gl_FrontMaterial.ambient + 
					diffuse * gl_FrontMaterial.diffuse + 
					specular * gl_FrontMaterial.specular);

	gl_FrontColor = clamp(color, 0.0, 1.0);
	
	gl_Position = ftransform();

}
